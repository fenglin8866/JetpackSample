应用架构

1.分层。

2.分模块。

3.观察者模式。事件导致数据变化，数据变化通知界面，使过程自动化（RxJava，StateFlow，State，LiveData）。
数据（room，sp，其他）变化通知缓存（ViewModel），缓存变化通知界面（View和Compose）。

4.数据模型驱动界面。界面仅仅是显示，界面的变化都是通过数据改变导致。

5.生命周期性。生命周期仅处于活跃状态更新。其他状态不更新，取消请求，取消线程或协程，当重新进入活跃状态是接受最新的数据。

6.对象限定作用域，超出作用域对象销毁，而不是简单的全局单例，较少资源的销毁。

7.配置更改处理。界面与数据分离，使数据生命周期与界面周期长，同时限定作用域在当前界面内，而不是全局的。

8.进程被系统杀死的处理。界面部分数据进行持久化存储。

